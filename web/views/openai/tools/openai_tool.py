from report.models import TockBooking, ResyReservation, ToastOrder
from web.models.user import User
from datetime import datetime
from django.db.models import Sum, Count
from roles.permissions import UserPermission
from roles.constants import (
    UNLIMITED_ACCESS_TO_CONVERSATION_ANALYTICS,
    LIMITED_ACCESS_TO_CONVERSATION_ANALYTICS,
)
from web.models import BlockCategory
from web.models import Unit
from constance import config
import logging

logger = logging.getLogger(__name__)

formatted_date = datetime.now().strftime("%b %d %Y")

FIELDS = None


TOTAL_PROFIT_TOOL = {
    "type": "function",
    "function": {
        "name": "calculate_total_profit",
        "description": "calculates the sum of profits (orders), returns -1 if the user doesn't have the access to that unit, the amount is generated by using toast orders data",
        "parameters": {
            "type": "object",
            "properties": {
                "unit_name": {
                    "type": "string",
                    "description": "The unit name specified for the results",
                },
                "start_date": {
                    "type": "string",
                    "description": "started date of the filter %Y-%m-%d",
                },
                "end_date": {
                    "type": "string",
                    "description": "ended date of the filter %Y-%m-%d",
                },
            },
            "required": ["unit_name", "start_date", "end_date"],
        },
    },
}

ORDERS_COUNT = {
    "type": "function",
    "function": {
        "name": "orders_count",
        "description": "Counts the number of orders for a specified unit within the given date range. Returns -1 if the user does not have access to the unit.",
        "parameters": {
            "type": "object",
            "properties": {
                "unit_name": {
                    "type": "string",
                    "description": "The unit name for which the order count is calculated.",
                },
                "start_date": {
                    "type": "string",
                    "description": "The start date of the filter in the format %Y-%m-%d.",
                },
                "end_date": {
                    "type": "string",
                    "description": "The end date of the filter in the format %Y-%m-%d.",
                },
            },
            "required": ["unit_name", "start_date", "end_date"],
        },
    },
}

TOCKS_COUNT = {
    "type": "function",
    "function": {
        "name": "tocks_count",
        "description": "Counts the number of tock bookings for a specified unit within the given date range. Returns -1 if the user does not have access to the unit.",
        "parameters": {
            "type": "object",
            "properties": {
                "unit_name": {
                    "type": "string",
                    "description": "The unit name for which the tock count is calculated.",
                },
                "start_date": {
                    "type": "string",
                    "description": "The start date of the filter in the format %Y-%m-%d.",
                },
                "end_date": {
                    "type": "string",
                    "description": "The end date of the filter in the format %Y-%m-%d.",
                },
            },
            "required": ["unit_name", "start_date", "end_date"],
        },
    },
}

RESIES_COUNT = {
    "type": "function",
    "function": {
        "name": "resies_count",
        "description": "Counts the number of Resy reservations for a specified unit within the given date range. Returns -1 if the user does not have access to the unit.",
        "parameters": {
            "type": "object",
            "properties": {
                "unit_name": {
                    "type": "string",
                    "description": "The unit name for which the reservation count is calculated.",
                },
                "start_date": {
                    "type": "string",
                    "description": "The start date of the filter in the format %Y-%m-%d.",
                },
                "end_date": {
                    "type": "string",
                    "description": "The end date of the filter in the format %Y-%m-%d.",
                },
            },
            "required": ["unit_name", "start_date", "end_date"],
        },
    },
}

GET_GUEST_USERS_COUNT = {
    "type": "function",
    "function": {
        "name": "get_guest_users_count",
        "description": "Counts the number of distinct guest users who made tock bookings for a specified unit within the given date range. Returns -1 if the user does not have access to the unit.",
        "parameters": {
            "type": "object",
            "properties": {
                "unit_name": {
                    "type": "string",
                    "description": "The unit name for which the guest user count is calculated.",
                },
                "start_date": {
                    "type": "string",
                    "description": "The start date of the filter in the format %Y-%m-%d.",
                },
                "end_date": {
                    "type": "string",
                    "description": "The end date of the filter in the format %Y-%m-%d.",
                },
            },
            "required": ["unit_name", "start_date", "end_date"],
        },
    },
}

GET_USERS_COUNT_PER_UNIT = {
    "type": "function",
    "function": {
        "name": "get_users_count_per_unit",
        "description": "Gets the count of users per unit for a specified unit within the given date range. Returns None if the unit is not found or the user does not have access.",
        "parameters": {
            "type": "object",
            "properties": {
                "unit_name": {
                    "type": "string",
                    "description": "The unit name for which the user count is calculated.",
                },
                "start_date": {
                    "type": "string",
                    "description": "The start date of the filter in the format %Y-%m-%d.",
                },
                "end_date": {
                    "type": "string",
                    "description": "The end date of the filter in the format %Y-%m-%d.",
                },
            },
            "required": ["unit_name", "start_date", "end_date"],
        },
    },
}


def check_permission(user, block_category=None):
    if block_category == None:
        return True
    if UserPermission.check_user_permission(
        user, UNLIMITED_ACCESS_TO_CONVERSATION_ANALYTICS
    ):
        return True
    elif UserPermission.check_user_permission(
        user, LIMITED_ACCESS_TO_CONVERSATION_ANALYTICS
    ):
        if block_category in BlockCategory.objects.accessible_by_user(user):
            return True
        return False


def calculate_total_profit(user: User, unit_name, start_date, end_date):
    unit = (
        Unit.objects.accessible_by_user(user).filter(name__contains=unit_name).first()
    )
    if check_permission(user):
        start_date = datetime.strptime(start_date, "%Y-%m-%d")
        end_date = datetime.strptime(end_date, "%Y-%m-%d")

        filtered_orders = ToastOrder.objects.filter(
            toast_auth__unit=unit, opened__gte=start_date, opened__lte=end_date
        )

        total_sum = filtered_orders.aggregate(Sum("total"))["total__sum"]

        return str(total_sum) if total_sum is not None else "0"
    return "-1"


def orders_count(user: User, unit_name, start_date, end_date):
    unit = (
        Unit.objects.accessible_by_user(user).filter(name__contains=unit_name).first()
    )
    if check_permission(user):
        start_date = datetime.strptime(start_date, "%Y-%m-%d")
        end_date = datetime.strptime(end_date, "%Y-%m-%d")

        order_count = ToastOrder.objects.filter(
            toast_auth__unit=unit, opened__gte=start_date, opened__lte=end_date
        ).count()

        return order_count
    return "-1"


def tocks_count(user: User, unit_name, start_date, end_date):
    unit = (
        Unit.objects.accessible_by_user(user).filter(name__contains=unit_name).first()
    )
    if check_permission(user):
        start_date = datetime.strptime(start_date, "%Y-%m-%d")
        end_date = datetime.strptime(end_date, "%Y-%m-%d")

        tock_count = TockBooking.objects.filter(
            tock__unit=unit,
            report_triggered_at__gte=start_date,
            report_triggered_at__lte=end_date,
        ).count()

        return tock_count
    return -1


def resies_count(user: User, unit_name, start_date, end_date):
    unit = (
        Unit.objects.accessible_by_user(user).filter(name__contains=unit_name).first()
    )
    if check_permission(user):
        start_date = datetime.strptime(start_date, "%Y-%m-%d")
        end_date = datetime.strptime(end_date, "%Y-%m-%d")

        resy_count = ResyReservation.objects.filter(
            resy_auth_auth__unit=unit, datetime__gte=start_date, datetime__lte=end_date
        ).count()

        return resy_count
    return -1


def get_guest_users_count(user: User, unit_name, start_date, end_date):
    unit = (
        Unit.objects.accessible_by_user(user).filter(name__contains=unit_name).first()
    )
    if check_permission(user):
        start_date = datetime.strptime(start_date, "%Y-%m-%d")
        end_date = datetime.strptime(end_date, "%Y-%m-%d")

        guest_count = (
            TockBooking.objects.filter(
                tock__unit=unit, time__gte=start_date, time__lte=end_date
            )
            .distinct("user")
            .count()
        )

        return guest_count
    return -1


# TODO:check its works or not
def get_users_count_per_unit(user: User, unit_name, start_date, end_date):
    unit = (
        Unit.objects.accessible_by_user(user).filter(name__icontains=unit_name).first()
    )

    if unit is None:
        return None

    if not check_permission(user):
        return None

    start_date = datetime.strptime(start_date, "%Y-%m-%d")
    end_date = datetime.strptime(end_date, "%Y-%m-%d")

    users_count = (
        TockBooking.objects.filter(
            tock__unit=unit, time__gte=start_date, time__lte=end_date
        )
        .values("user")
        .annotate(count=Count("user"))
        .order_by("-count")
    )

    return users_count
