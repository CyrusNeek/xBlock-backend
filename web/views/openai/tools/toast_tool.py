from report.models.toast_time_entries import ToastTimeEntries
from roles.constants import LIMITED_BLOCK_ACCESS, UNLIMITED_BLOCK_ACCESS
from web.models.user import User
from web.views.openai.tools.utils import (
    queryset_columns_to_string,
    queryset_values_list_to_string,
)
from report.models import (
    ToastOrder,
    ToastPayment,
    ToastItemSelectionDetails,
    ReportLocation,
    Event,
)
from report.model_fields import TOAST_ITEM_SELECTION_FIELDS
from django.core.serializers.json import DjangoJSONEncoder
import json
from web.models import Unit
from roles.permissions import UserPermission
from datetime import datetime
from typing import List, Optional
import logging
import copy

logger = logging.getLogger(__name__)

formatted_date = datetime.now().strftime("%b %d %Y")

MODEL = "ToastSalesSummaryReport"
FUNCTION_NAME = "toast_assistant_function"
KNOWLEDGE_RETURN_RECORD_LIMIT = 120
FIELDS = ["unit__address", "created_at", "report"]


TOAST_ORDER_FIELDS = [
    "order_id",
    "order_number",
    "checks",
    "opened",
    "number_of_guests",
    "tab_names",
    "server",
    "table",
    "revenue_center",
    "dining_area",
    "service",
    "dining_options",
    "discount_amount",
    "amount",
    "tax",
    "tip",
    "gratuity",
    "total",
    "voided",
    "paid",
    "closed",
    "duration_opened_to_paid",
    "order_source",
]

TOAST_PAYMENT_FIELDS = [
    "payment_id",
    "paid_date",
    "order_date",
    "check_id",
    "check_number",
    "tab_name",
    "server",
    "table",
    "dining_area",
    "service",
    "dining_option",
    "house_account",
    "amount",
    "tip",
    "gratuity",
    "total",
    "swiped_card_amount",
    "keyed_card_amount",
    "amount_tendered",
    "refunded",
    "refund_date",
    "refund_amount",
    "refund_tip_amount",
    "void_user",
    "void_approver",
    "void_date",
    "status",
    "type",
    "cash_drawer",
    "card_type",
    "other_type",
    "last_4_card_digits",
    "vmcd_fees",
    "room_info",
    "receipt",
    "source",
]

TOAST_TIME_ENTRIES_FIELDS = [
    "time_entry_id",
    "guid",
    "employee_id",
    "employee_guid",
    "employee_external_id",
    "employee",
    "job_id",
    "job_guid",
    "job_code",
    "job_title",
    "in_date",
    "out_date",
    "auto_clock_out",
    "total_hours",
    "unpaid_break_time",
    "paid_break_time",
    "payable_hours",
    "cash_tips_declared",
    "non_cash_tips",
    "total_gratuity",
    "total_tips",
    "tips_withheld",
    "wage",
    "regular_hours",
    "overtime_hours",
    "regular_pay",
    "overtime_pay",
    "total_pay",
]

TOAST_SALES_SUMMARY_REPORT_TOOL = {
    "type": "function",
    "function": {
        "name": FUNCTION_NAME,
        "description": "Get Toast sales summary reports based on restaurant unit's address and report date range. "
        "Toast sales summary reports are generated by connecting toastOrder, Unit, ToastItemSelection, and ReportUser models. "
        "ToastOrder model provides information about each order, including order details, payment details, and time entries. "
        "Unit model stores information about the restaurant (or unit) like address, name, and timezone. "
        "ReportUser model stores information about the users who create or update the reports. "
        "ToastOrder model is connected to Unit model by the unit__address field, which stores the address of the restaurant. "
        "ToastOrder model is connected to ToastItemSelection model through the order_id field. "
        "ToastOrder model is connected to ReportUser model through the created_by field. "
        "Unit model is connected to ToastOrder model through the unit__address field. "
        "ReportUser model is connected to ToastOrder model through the created_by field.",
        "parameters": {
            "type": "object",
            "properties": {
                "unit_address": {
                    "type": "string",
                    "description": "Unit/Restaurant name and address pair for the Toast report. Ask for clarification and provide a list of available address pairs if user did not specify one.",
                },
                "from_date": {
                    "type": "string",
                    "description": "Start date for the report in the format YYYY-MM-DD.",
                },
                "to_date": {
                    "type": "string",
                    "description": "End date for the report in the format YYYY-MM-DD.",
                },
            },
            "required": ["unit_address", "from_date", "to_date"],
        },
    },
}


def get_dynamic_toast_sales_summary_report_tool(user: User) -> dict:
    dynamic_toast_tool = copy.deepcopy(TOAST_SALES_SUMMARY_REPORT_TOOL)

    # Modify the copied dictionary
    unit_address_enum = [
        unit.name + " -- " + unit.address
        for unit in user.all_units
        if unit.address != ""
    ]
    dynamic_toast_tool["function"]["parameters"]["properties"]["unit_address"][
        "enum"
    ] = unit_address_enum

    logger.info(f"Dynamic Update Toast Tool unit_address arg enum: {unit_address_enum}")
    return dynamic_toast_tool


def toast_assistant_function(
    user: User,
    unit_address: str,
    from_date: Optional[str] = None,
    to_date: Optional[str] = None,
):
    accessible_locations = ReportLocation.objects.filter(toast__unit__in=user.all_units)

    kwargs = {"toast_auth__unit__name": unit_address.split(" -- ")[0]}

    if from_date and to_date:
        kwargs["opened__date__range"] = (from_date, to_date)

    elif from_date:
        kwargs["opened__date"] = from_date

    logger.info(kwargs)

    if UserPermission.check_user_permission(user, [UNLIMITED_BLOCK_ACCESS]):
        kwargs["toast_auth__unit__in"] = user.brands.values_list("units", flat=True)

        reports = ToastOrder.objects.filter(**kwargs)
    elif UserPermission.check_user_permission(user, [LIMITED_BLOCK_ACCESS]):
        kwargs["toast_auth__unit__in"] = user.all_units
        reports = ToastOrder.objects.filter(**kwargs)
    else:
        reports = ToastOrder.objects.none()

    if reports.exists():
        reports = reports[:KNOWLEDGE_RETURN_RECORD_LIMIT]

        orders_data = list(reports.values(*TOAST_ORDER_FIELDS))
        toastitems = ToastItemSelectionDetails.objects.filter(order__in=reports)

        payments = ToastPayment.objects.filter(order__in=reports)
        payments_data = list(payments.values(*TOAST_PAYMENT_FIELDS))

        # time_entries = ToastTimeEntries.objects.filter(
        #     location__in=accessible_locations
        # )
        toastitems_data = list(toastitems.values(*TOAST_ITEM_SELECTION_FIELDS))
        # time_entries_data = list(time_entries.values(*TOAST_TIME_ENTRIES_FIELDS))

        combined_data = {
            "orders": orders_data,
            "payments": payments_data,
            # "time_entries": time_entries_data,
            "toastitems": toastitems_data,
        }

        knowledge = json.dumps(combined_data, cls=DjangoJSONEncoder)

        logger.info(f"knowledge: {knowledge}")
        return knowledge

    EMPTY_KNOWLEDGE = f"No Toast sales summary reports found for unit address {unit_address} on {from_date} to {to_date}."
    return EMPTY_KNOWLEDGE
