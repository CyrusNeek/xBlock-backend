# Minimal Dockerfile for Django on Cloud Run
FROM python:3.11-slim

WORKDIR /app

# Install system dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    netcat-traditional \
    procps \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Copy requirements and install Python dependencies
COPY requirements.txt /app/requirements.txt
RUN pip install --no-cache-dir -r /app/requirements.txt

# Copy entrypoint script
COPY entrypoint.sh /app/entrypoint.sh

# Convert CRLF to LF for entrypoint.sh (if any)
RUN sed -i 's/\r$//' /app/entrypoint.sh

# Copy the rest of the project files into /app
COPY . /app/

# Ensure entrypoint script is executable (after all copies)
RUN chmod +x /app/entrypoint.sh

# List contents of /app for debugging build (this should be before ENTRYPOINT)
RUN ls -la /app

# Expose port
EXPOSE 8080

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1

# NOTE: Running as root for Cloud Run
# Use CMD instead of ENTRYPOINT to avoid entrypoint.sh issues

# Create a startup script directly in the Dockerfile that prioritizes security
RUN echo '#!/bin/bash\n\
echo "Starting application directly from CMD"\n\
# Set Django settings module\n\
export DJANGO_SETTINGS_MODULE=${DJANGO_SETTINGS_MODULE:-xblock.settings.production}\n\
echo "Using Django settings module: $DJANGO_SETTINGS_MODULE"\n\
# Set port\n\
export PORT=${PORT:-8080}\n\
echo "Using PORT: $PORT"\n\
# Run Django commands\n\
python manage.py collectstatic --noinput || echo "collectstatic failed"\n\
python manage.py migrate || echo "migrate failed"\n\
# Validate Django settings\n\
if python -c "import django; django.setup(); from django.conf import settings; print(\'Django settings loaded successfully\')" 2>/dev/null; then\n\
  echo "Django settings loaded successfully, starting Gunicorn"\n\
  # Start Gunicorn with proper settings\n\
  exec gunicorn xblock.wsgi:application --bind 0.0.0.0:$PORT --workers 3 --timeout 300 --log-level=info\n\
else\n\
  echo "Django settings failed to load, but we will NOT start debug server for security reasons"\n\
  echo "Starting a minimal HTTP server that does not expose sensitive information"\n\
  # Create a minimal response that does not expose any sensitive information\n\
  python -c "\n\
from http.server import HTTPServer, BaseHTTPRequestHandler\n\
import os\n\
\n\
class SecureHandler(BaseHTTPRequestHandler):\n\
    def do_GET(self):\n\
        self.send_response(503)\n\
        self.send_header(\'Content-type\', \'text/html\')\n\
        self.end_headers()\n\
        self.wfile.write(b\\\'<!DOCTYPE html><html><head><title>xBlock API - Service Unavailable</title></head>\\\n\
        <body><h1>Service Temporarily Unavailable</h1>\\\n\
        <p>The xBlock API is currently unavailable. Please try again later or contact support.</p>\\\n\
        <p>This is a protective measure to prevent exposure of sensitive information.</p></body></html>\')\n\
\n\
server = HTTPServer((\'\', int(os.environ.get(\'PORT\', 8080))), SecureHandler)\n\
print(\'Starting secure fallback server on port %s\' % os.environ.get(\'PORT\', 8080))\n\
server.serve_forever()\n\
"\n\
fi\n\
' > /app/start.sh \
    && chmod +x /app/start.sh \
    && cat /app/start.sh

# Use CMD instead of ENTRYPOINT
CMD ["/bin/bash", "/app/start.sh"]
