"""
Django settings for xblock project.

Generated by 'django-admin startproject' using Django 4.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

from pathlib import Path
import os
import json
from datetime import timedelta
from corsheaders.defaults import default_headers
from celery.schedules import crontab
from celery.schedules import timedelta
from dotenv import load_dotenv, find_dotenv
from datetime import datetime

import sys

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent.parent


load_dotenv(find_dotenv())


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("SECRET_KEY", "django-insecure-d=(vl8ppddk+h95wy-z$3sydg_-h0m*n-h!a+tycod8dr)72gc")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv("DEBUG", "False").lower() in ("true", "1", "yes")

ALLOWED_HOSTS = [
    "127.0.0.1",
    "0.0.0.0",
    "localhost:8000",
    "192.168.70.253",
    "localhost",
    "api",
    "hub.xblock.ai",
    "app.xblock.ai",
    "app2.xblock.ai",
    "beta.xblock.ai",
    "admin.xblock.ai",
    "stage.xblock.ai",
    "stage-front.xblock.ai",
    "studious-cod-jx7jr4jpv493jj7-8000.app.github.dev",
    "console.brain.xblock.ai",
    "api.brain.xblock.ai",
]

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "constance",
    "drf_spectacular",
    "corsheaders",
    "django_filters",
    "rest_framework",
    "django_celery_results",
    "web.apps.WebConfig",
    "report.apps.ReportConfig",
    "roles.apps.RolesConfig",
    "accounting.apps.AccountingConfig",
    "google_services.apps.GoogleServicesConfig",
    "subscription.apps.SubscriptionConfig",
    "vtk.apps.VTKConfig",
    "xmeeting.apps.XmeetingConfig",
    "customer.apps.CustomerConfig",
    "pos.apps.PosConfig",
    "employee.apps.EmployeeConfig",
    "reservation.apps.ReservationConfig",
]

AUTH_USER_MODEL = "web.User"

CORS_ALLOWED_ORIGINS = [
    "https://sub.example.com",
    "http://localhost:3000",
    "http://127.0.0.1:3000",
    "https://hub.xblock.ai",
    "https://app.xblock.ai",
    "https://app2.xblock.ai",
    "https://beta.xblock.ai",
    "https://stage.xblock.ai",
    "https://stage-front.xblock.ai",
    "http://192.168.70.253:3000",
    "https://effective-umbrella-ww5rv9rqwrxcgxxp-3000.app.github.dev",
    "https://console.brain.xblock.ai",
    "https://brain.xblock.ai",
]

CORS_ALLOW_METHODS = [
    "GET",
    "POST",
    "PUT",
    "PATCH",
    "DELETE",
    "OPTIONS",
]

CORS_ALLOW_CREDENTIALS = True

CORS_ALLOW_HEADERS = list(default_headers) + [
    "baggage",
    "sentry-trace",
]

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ),
    "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",
}

SPECTACULAR_SETTINGS = {
    "TITLE": "xBlock",
    "DESCRIPTION": "xBlock API",
    "VERSION": "1.0.0",
    "SERVE_INCLUDE_SCHEMA": False,
}

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(days=7),
}

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

STORAGES = {
    "default": {"BACKEND": "django.core.files.storage.FileSystemStorage"},
    "staticfiles": {"BACKEND": "django.contrib.staticfiles.storage.StaticFilesStorage"},
}

S3_UNIT_FILE_FOLDER = "unit-file"
S3_MEETING_RECORDING_FOLDER = "meetings"

# Check if we're in console mode (admin-only interface)
CONSOLE_MODE = os.getenv("CONSOLE_MODE", "").lower() == "true"

# Set the URL configuration based on console mode
if CONSOLE_MODE:
    ROOT_URLCONF = "xblock.console_urls"
else:
    ROOT_URLCONF = "xblock.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, "templates")],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "xblock.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql_psycopg2",
        "NAME": os.getenv("DATABASE_NAME", "xblock"),
        "USER": os.getenv("DATABASE_USER", "xblock"),
        "PASSWORD": os.getenv("DATABASE_PASSWORD", "xblock"),
        "HOST": os.getenv("DATABASE_HOST", "localhost"),
        "PORT": os.getenv("DATABASE_PORT", "5432"),
    }
}


# AWS Key - Optional, can be provided via INTEGRATIONS_CREDENTIALS
# Load integration credentials if available
INTEGRATIONS_CREDENTIALS = {}

if os.getenv("INTEGRATIONS_CREDENTIALS"):
    try:
        INTEGRATIONS_CREDENTIALS = json.loads(os.getenv("INTEGRATIONS_CREDENTIALS"))
    except json.JSONDecodeError:
        print("Warning: Could not parse INTEGRATIONS_CREDENTIALS as JSON")


# Quickbooks
QB_CLIENT_ID = (
    os.getenv("QB_CLIENT_ID_DEVELOPMENT")
    if DEBUG
    else os.getenv("QB_CLIENT_ID_PRODUCTION")
)

QB_CLIENT_SECRET = (
    os.getenv("QB_CLIENT_SECRET_DEVELOPMENT")
    if DEBUG
    else os.getenv("QB_CLIENT_SECRET_PRODUCTION")
)
QB_REDIRECT_URL = (
    "http://localhost:8000/api/quickbooks/auth/callback"
    if DEBUG
    else "https://api.xblock.ai/api/quickbooks/auth/callback"
)

# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_ROOT = os.path.join(BASE_DIR, "..", "www", "static")
STATIC_URL = "/static/"
# set the static files directory for development
if DEBUG:
    STATICFILES_DIRS = [
        os.path.join(BASE_DIR, "static"),
    ]
# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
        },
    },
    "root": {
        "handlers": ["console"],
        "level": "INFO",
    },
    "loggers": {
        "django": {
            "handlers": ["console"],
            "level": "INFO",
            "propagate": False,  # Set to False to prevent duplicate logs
        },
        # Add other specific loggers here if necessary
    },
}

CONSTANCE_CONFIG = {
    "CORS_ALLOWED_ORIGINS_EXTRA": (
        "http://localhost:3000,https://test.com,https://xbrain-ai-923738140935.us-west1.run.app,https://oauth2.googleapis.com,https://www.googleapis.com",
        "Extra CORS allowed origins, comma-separated",
    ),
    "MEETING_TOOL_DESC": (
        "Get meeting information. You can search meetings by their title, date created, or date of the meeting.",
        "OpenAI meeting tool function description",
    ),
    "MEETING_TOOL_ARG_TITLE_DESC": (
        "Title or partial title of the meeting to search for",
        "OpenAI meeting tool function argument title description",
    ),
    "MEETING_TOOL_ARG_CREATED_DATE_FROM_DESC": (
        "Start period of meeting created date",
        "OpenAI meeting tool function argument created_date_from description",
    ),
    "MEETING_TOOL_ARG_CREATED_DATE_TO_DESC": (
        "End period of meeting created date",
        "OpenAI meeting tool function argument created_date_to description",
    ),
    # Meeting tool - Function calling
    "QUICKBOOKS_TOOL_DESC": (
        "Get quickbooks profit and loss or balance sheet report. The report period will be based on either date_macro, or a specified start_date and end_date from user.",
        "OpenAI quickbooks tool function description",
    ),
    "QUICKBOOKS_TOOL_ARG_REPORT_TYPE_DESC": (
        "Type of report to generate. Must be one of 'profit_and_loss' or 'balance_sheet'.",
        "OpenAI quickbooks tool function argument report_type description",
    ),
    "QUICKBOOKS_TOOL_ARG_DATE_MACRO_DESC": (
        "Predefined date range for the report. Must be one of 'this_month', 'last_month', 'this_quarter', 'last_quarter', 'this_year', 'last_year', 'today', 'yesterday', 'last_7_days', 'last_30_days', 'last_365_days'. If provided, start_date and end_date are ignored.",
        "OpenAI quickbooks tool function argument date_macro description",
    ),
    "QUICKBOOKS_TOOL_ARG_START_DATE_DESC": (
        "Start date of the report, in the format YYYY-MM-DD. Used when date_macro is not provided.",
        "OpenAI quickbooks tool function argument start_date description",
    ),
    "QUICKBOOKS_TOOL_ARG_END_DATE_DESC": (
        "End date of the report, in the format YYYY-MM-DD. end_date must be greater than start_date. Used when date_macro is not provided.",
        "OpenAI quickbooks tool function argument end_date description",
    ),
    "QUICKBOOKS_TOOL_ARG_ADDRESS_DESC": (
        "Unit/Restaurant name and address pair for the Toast report. Ask for clarification and provide a list of available address pairs if user did not specify one.",
        "OpenAI quickbooks tool function argument location description",
    ),
    "TOAST_TOOL_DESC": (
        "Get Toast sales data for a specific restaurant location and date range.",
        "OpenAI toast tool function description",
    ),
    "TOAST_TOOL_ARG_ADDRESS_DESC": (
        "Unit/Restaurant name and address pair for the Toast report. Ask for clarification and provide a list of available address pairs if user did not specify one.",
        "OpenAI toast tool function argument address description",
    ),
    "TOAST_TOOL_ARG_START_DATE_DESC": (
        "Start date of the report, in the format YYYY-MM-DD.",
        "OpenAI toast tool function argument start_date description",
    ),
    "TOAST_TOOL_ARG_END_DATE_DESC": (
        "End date of the report, in the format YYYY-MM-DD. end_date must be greater than start_date.",
        "OpenAI toast tool function argument end_date description",
    ),
    "TOAST_TOOL_ARG_REPORT_TYPE_DESC": (
        "Type of report to generate. Must be one of 'sales', 'labor', 'menu', 'inventory'.",
        "OpenAI toast tool function argument report_type description",
    ),
    "OPENAI_API_KEY": (
        os.getenv("OPENAI_API_KEY", ""),
        "OpenAI API key",
    ),
    "OPENAI_MODEL": (
        "gpt-4o",
        "OpenAI model to use",
    ),
    "OPENAI_TEMPERATURE": (
        0.7,
        "OpenAI temperature",
    ),
    "OPENAI_MAX_TOKENS": (
        4000,
        "OpenAI max tokens",
    ),
    "OPENAI_SYSTEM_PROMPT": (
        "You are a helpful assistant.",
        "OpenAI system prompt",
    ),
    "OPENAI_FUNCTION_CALLING_ENABLED": (
        True,
        "Whether OpenAI function calling is enabled",
    ),
    "OPENAI_FUNCTION_CALLING_FUNCTIONS": (
        "[]",
        "OpenAI function calling functions",
    ),
    "OPENAI_FUNCTION_CALLING_FUNCTION_CALL": (
        "auto",
        "OpenAI function calling function call",
    ),
    "OPENAI_FUNCTION_CALLING_TOOLS": (
        "[]",
        "OpenAI function calling tools",
    ),
    "OPENAI_FUNCTION_CALLING_TOOL_CHOICE": (
        "auto",
        "OpenAI function calling tool choice",
    ),
    "OPENAI_FUNCTION_CALLING_RESPONSE_FORMAT": (
        "{}",
        "OpenAI function calling response format",
    ),
    "OPENAI_FUNCTION_CALLING_SEED": (
        0,
        "OpenAI function calling seed",
    ),
    "OPENAI_FUNCTION_CALLING_USER": (
        "",
        "OpenAI function calling user",
    ),
    "OPENAI_FUNCTION_CALLING_STOP": (
        "[]",
        "OpenAI function calling stop",
    ),
    "OPENAI_FUNCTION_CALLING_PRESENCE_PENALTY": (
        0.0,
        "OpenAI function calling presence penalty",
    ),
    "OPENAI_FUNCTION_CALLING_FREQUENCY_PENALTY": (
        0.0,
        "OpenAI function calling frequency penalty",
    ),
    "OPENAI_FUNCTION_CALLING_LOGIT_BIAS": (
        "{}",
        "OpenAI function calling logit bias",
    ),
    "OPENAI_FUNCTION_CALLING_TOP_P": (
        1.0,
        "OpenAI function calling top p",
    ),
    "OPENAI_FUNCTION_CALLING_TOP_LOGPROBS": (
        None,
        "OpenAI function calling top logprobs",
    ),
    "OPENAI_FUNCTION_CALLING_LOGPROBS": (
        None,
        "OpenAI function calling logprobs",
    ),
    "OPENAI_FUNCTION_CALLING_MAX_RETRIES": (
        3,
        "OpenAI function calling max retries",
    ),
    "OPENAI_FUNCTION_CALLING_TIMEOUT": (
        60,
        "OpenAI function calling timeout",
    ),
    "OPENAI_FUNCTION_CALLING_API_BASE": (
        "https://api.openai.com/v1",
        "OpenAI function calling API base",
    ),
    "OPENAI_FUNCTION_CALLING_API_TYPE": (
        "open_ai",
        "OpenAI function calling API type",
    ),
    "OPENAI_FUNCTION_CALLING_API_VERSION": (
        None,
        "OpenAI function calling API version",
    ),
    "OPENAI_FUNCTION_CALLING_ENGINE": (
        None,
        "OpenAI function calling engine",
    ),
    "OPENAI_FUNCTION_CALLING_REQUEST_TIMEOUT": (
        60,
        "OpenAI function calling request timeout",
    ),
    "OPENAI_FUNCTION_CALLING_TRUNCATION_STRATEGY": (
        "auto",
        "OpenAI function calling truncation strategy",
    ),
    "OPENAI_FUNCTION_CALLING_ORGANIZATION": (
        None,
        "OpenAI function calling organization",
    ),
}

CONSTANCE_BACKEND = "constance.backends.database.DatabaseBackend"

CELERY_BROKER_URL = os.getenv("CELERY_BROKER_URL", "redis://redis:6379/0")
CELERY_RESULT_BACKEND = os.getenv("CELERY_RESULT_BACKEND", "redis://redis:6379/0")
REDBEAT_REDIS_URL = os.getenv("REDBEAT_REDIS_URL", "redis://redis:6379/0")
REDIS_URL = os.getenv("REDIS_URL", "redis://redis:6379/0")

CONSTANCE_REDIS_CONNECTION = os.getenv("CONSTANCE_REDIS_CONNECTION", "redis://redis:6379/0")

CELERY_BEAT_SCHEDULE = {
    "task_update_quickbooks_tokens": {
        "task": "accounting.tasks.update_quickbooks_tokens.update_quickbooks_tokens",
        "schedule": crontab(minute="*/5"),
    },
    "task_upload_customer_data_to_bucket": {
        "task": "customer.tasks.periodic_tasks.upload_customer_to_bucket.upload_customer_data_in_bucket",
        "schedule": crontab(minute="*/5"),
    },
    "task_create_report_app_new_models_data": {
        "task": "report.tasks.periodic.create_new_models_data.create_report_app_new_models_object",
        "schedule": timedelta(hours=6),
    },
    "task_create_employee_app_new_models_data": {
        "task": "employee.tasks.periodic_task.create_employee_objects.create_employee_app_data",
        "schedule": timedelta(hours=6),
    },
    "task_check_users_subscription": {
        "task": "subscription.tasks.check_users_subscription.check_users_subscription",
        "schedule": timedelta(minutes=1),
    },
    "task_send_subscription_email": {
        "task": "subscription.tasks.send_subscription_email.send_subscription_email",
        "schedule": timedelta(minutes=1),
    },
}


CELERY_RESULT_BACKEND = "django-db"

CELERY_RESULT_EXTENDED = True


#    SSH KEYS CONFIG
SSH_BASE_DIR = ".sshkeys/"


# CRAWL SETTINGS
CRAWL_BASE_CRAWL_SLEEP_IDLE_SECONDS = 100


GOOGLE_STORAGE_BUCKET_NAME = os.environ.get(
    "GCP_BUCKET_NAME", "xblock_beta_storage")
GOOGLE_CALENDAR_SCOPES = ["https://www.googleapis.com/auth/calendar"]
GOOGLE_API_CREDENTIALS = BASE_DIR / "google_credentials.json"

BUCKET_UNIT_FILE_FOLDER = "unit-file"
BUCKET_MEETING_FOLDER = "meetings"
BUCKET_SSH_KEYS_FOLDER = "sshkeys"

TESTING = "test" in sys.argv


if DEBUG:

    def show_toolbar(request):
        return True

    DEBUG_TOOLBAR_CONFIG = {
        "SHOW_TOOLBAR_CALLBACK": show_toolbar,
        "IS_RUNNING_TESTS": False,
    }

    if not TESTING:
        INSTALLED_APPS = [
            *INSTALLED_APPS,
            "debug_toolbar",
        ]
        MIDDLEWARE = [
            "debug_toolbar.middleware.DebugToolbarMiddleware",
            *MIDDLEWARE,
        ]


# else:
#     MIDDLEWARE = [
#         *MIDDLEWARE,
#         "xblock.telegram_middleware.TelegramBotMiddleware"
#     ]


#  TELEGRAM MANAGEMENT

TELEGRAM_BOT_API_KEY = os.getenv("TELEGRAM_BOT_API_KEY")
TELEGRAM_BOT_GROUP_ID = os.getenv("TELEGRAM_BOT_GROUP_ID")


VERBA_API_URL = os.getenv("VERBA_API_URL")
VERBA_USERNAME = os.getenv("VERBA_USERNAME")
VERBA_PASSWORD = os.getenv("VERBA_PASSWORD")
VERBA_API_WEBSOCKET = os.getenv("VERBA_API_WEBSOCKET")


# Weaviate settings - Optional, can be provided via INTEGRATIONS_CREDENTIALS
WEAVIATE_API_KEY = os.getenv("WEAVIATE_API_KEY") or INTEGRATIONS_CREDENTIALS.get("weaviate", {}).get("api_key")
WEAVIATE_URL = os.getenv("WEAVIATE_URL") or INTEGRATIONS_CREDENTIALS.get("weaviate", {}).get("url")

GOOGLE_OATH_CALLBACK_URL = os.getenv("GOOGLE_OATH_CALLBACK_URL")

WEBHOOK_API_KEY = os.getenv("STRIPE_WEBHOOK_API_KEY")
STRIPE_API_KEY = os.getenv("STRIPE_API_KEY")
STRIPE_SECRET_KEY = os.getenv("STRIPE_SECRET_KEY")
USE_PROXY = os.getenv("USE_PROXY", False)
if DEBUG and USE_PROXY:
    os.environ["http_proxy"] = os.getenv(
        "HTTP_PROXY", "http://localhost:12334")
    os.environ["https_proxy"] = os.getenv(
        "HTTPS_PROXY", "http://localhost:12334")

DAY_TOCK = 20

# Configure Sendgrid to send mail

# Using SendGrid Django email backend
EMAIL_BACKEND = "sendgrid_backend.SendgridBackend"
# Store API key securely in environment variable
SENDGRID_API_KEY = os.getenv("SENDGRID_API_KEY")
DEFAULT_FROM_EMAIL = os.getenv("DEFAULT_FROM_EMAIL", "hello@xblock.ai")

# Maximum upload size in bytes (e.g., 50 MB)
DATA_UPLOAD_MAX_MEMORY_SIZE = 52428800  # 50 MB
FILE_UPLOAD_MAX_MEMORY_SIZE = 52428800  # 50 MB
